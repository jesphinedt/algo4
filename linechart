import time
import matplotlib.pyplot as plt

# Pure recursive method
def F_recursive(n):
    if n <= 1:
        return 1
    else:
        return F_recursive(n-1) + F_recursive(n-2)

# Dynamic programming method
def F_dynamic(n):
    dp = [0] * (n+1)
    dp[0], dp[1] = 1, 1
    for i in range(2, n+1):
        dp[i] = dp[i-1] + dp[i-2]
    return dp[n]

# Measure execution time for F(10), F(20), ..., F(100)
n_values = list(range(10, 101, 10))
recursive_times = []
dynamic_times = []
N = 50  # Threshold value
for n in n_values:
    if n < N:
        start_time = time.time()
        F_recursive(n)
        recursive_times.append(time.time() - start_time)
    else:
        recursive_times.append(1000)  # Mark as a large value
    start_time = time.time()
    F_dynamic(n)
    dynamic_times.append(time.time() - start_time)

# Plot the results
plt.plot(n_values, recursive_times, label='Recursive')
plt.plot(n_values, dynamic_times, label='Dynamic Programming')
plt.xlabel('n')
plt.ylabel('Execution Time (s)')
plt.legend()
plt.show()
